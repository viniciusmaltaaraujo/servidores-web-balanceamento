# Configura√ß√µes globais de eventos (quantas conex√µes simult√¢neas o worker aceita)
events {
    worker_connections 1024;   # Cada worker pode lidar com at√© 1024 conex√µes
}

http {
    # Inclui tipos MIME para servir arquivos (html, css, js, etc.)
    include /etc/nginx/mime.types;
    default_type application/octet-stream;   # Tipo padr√£o caso n√£o seja identificado

    # -------------------------------
    # üîπ Defini√ß√£o das ZONAS de rate limiting
    # Essas zonas armazenam os IPs e contadores de requisi√ß√µes
    # S√≥ podem ser declaradas aqui dentro do bloco http{}
    # -------------------------------
    limit_req_zone $binary_remote_addr zone=api:10m rate=1r/s;     # M√°x. 1 req/s para /api/
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;   # M√°x. 1 req/s para /login

    # -------------------------------
    # üîπ Logs customizados
    # -------------------------------
    log_format security '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" rt=$request_time';

    access_log /var/log/nginx/access.log security;   # Log de acessos usando formato acima
    error_log /var/log/nginx/error.log warn;        # Log de erros (n√≠vel warn)

    server {
        listen 80;                # Porta padr√£o HTTP
        server_name localhost;    # Nome do servidor
        root /var/www/html;       # Pasta raiz dos arquivos
        index index.html index.php; # Arquivos de √≠ndice

        # -------------------------------
        # üîπ Rota /api/
        # - Aplica rate limit definido na zona "api"
        # - burst=2 ‚Üí permite at√© 2 excessos antes de bloquear
        # - nodelay ‚Üí bloqueia imediatamente se ultrapassar
        # -------------------------------
        location /api/ {
            limit_req zone=api burst=2 nodelay;
            proxy_pass http://api:5000; 
        }

        # -------------------------------
        # üîπ Rota /login
        # - Aplica regras de rate limit diferentes
        # - burst=3 ‚Üí tolera at√© 3 excessos
        # -------------------------------
        location /login {
            limit_req zone=login burst=3 nodelay;
            try_files $uri $uri/ =404;
        }

        # -------------------------------
        # üîπ Regras de bloqueio via express√µes regulares
        # -------------------------------

        # Bloqueia scanners conhecidos via User-Agent
        if ($http_user_agent ~* (sqlmap|nikto|nmap|masscan|nessus)) {
            return 403;   # Forbidden
        }

        # Bloqueia SQL Injection simples (union, select, drop, etc.)
        if ($args ~* (union|select|insert|delete|drop|create|alter|exec|script)) {
            return 403;
        }

        # Bloqueia tentativas de XSS b√°sico
        if ($args ~* (<script|javascript:|vbscript:|onload|onerror)) {
            return 403;
        }

        # -------------------------------
        # üîπ Rota padr√£o /
        # -------------------------------
        location / {
            try_files $uri $uri/ =404;   # Tenta servir arquivo, sen√£o 404
        }

        # -------------------------------
        # üîπ Simula√ß√£o de PHP
        # Aqui o Nginx n√£o executa PHP de verdade, apenas retorna texto
        # -------------------------------
        location ~ \.php$ {
            add_header Content-Type text/html;
            return 200 "PHP processado: $request_uri";
        }
    }
}
